; SERIAL.MAC
;
; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA
;
; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker
;
; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders
;


	.Z80
	ASEG

	org	04000H

Y0000	equ	00000H
RDSLT	equ	0000CH
WRSLT	equ	00014H
CALSLT	equ	0001CH
ENASLT	equ	00024H
CHSNS	equ	0009CH
CHGET	equ	0009FH
CHPUT	equ	000A2H
LPTOUT	equ	000A5H

Y6000	equ	06000H
Y6600	equ	06600H
Y6601	equ	06601H
Y661E	equ	0661EH
Y664B	equ	0664BH
Y6676	equ	06676H
Y6678	equ	06678H
Y667A	equ	0667AH
Y667C	equ	0667CH
Y667E	equ	0667EH
Y6680	equ	06680H
Y6682	equ	06682H
Y6683	equ	06683H
Y6684	equ	06684H
Y6685	equ	06685H
Y6687	equ	06687H
Y6688	equ	06688H
Y6689	equ	06689H
Y668B	equ	0668BH
Y668D	equ	0668DH
Y668F	equ	0668FH
Y6690	equ	06690H
Y6691	equ	06691H
Y6692	equ	06692H
Y6693	equ	06693H
Y6694	equ	06694H
Y6695	equ	06695H
Y6697	equ	06697H
Y6699	equ	06699H
Y669E	equ	0669EH
Y66A3	equ	066A3H
Y66A8	equ	066A8H
Y66A9	equ	066A9H
Y66AA	equ	066AAH
Y66AB	equ	066ABH
Y66AC	equ	066ACH
Y66AD	equ	066ADH
Y66EB	equ	066EBH
Y6700	equ	06700H
YBFFA	equ	0BFFAH

DAC	equ	0F7F6H
PTRFIL	equ	0F864H
OLDINT	equ	0FB11H
ONGSBF	equ	0FBD8H
TRPTBL	equ	0FC4CH
INTFLG	equ	0FC9BH
CSRSR	equ	0FCA9H
EXPTBL	equ	0FCC1H
HKEYI	equ	0FD9AH
HNEWS	equ	0FF3EH
FCALL	equ	0FFCAH
YFFFF	equ	0FFFFH

	db	"A","B"
	dw	A40B2		; INIT
	dw	A435A		; STATEMENT
	dw	A440C		; DEVICE
	dw	0
	ds	6

A4010	db	0
	db	1
	db	0
	jp	A4040
	jp	A44B9
	jp	A59CA
	jp	A4585
	jp	A56E5
	jp	A4525
	jp	A408B
	jp	A4622
	jp	A4675
	jp	A46B7
	jp	A590C
	jp	A5986
	jp	A51C7
	ret
	ret
	ret
	ret
	ret
	ret
;
; RS232.INIT
;
A4040	ei
	push	bc
	push	de
	push	hl
	push	bc
	call	A53C7		; buid ? table
	pop	bc
	ld	iy,-13
	add	iy,sp
	ld	sp,iy
	push	iy
	pop	de
	ld	c,13
A4056:	call	A488E		; read from interslot memory
	ld	(de),a
	inc	de
	dec	c
	jr	nz,A4056	; the complete parameterblock
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5232		; initalize rs232
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ex	af,af'
	ld	iy,0000DH
	add	iy,sp
	ld	sp,iy		; discharge parameterblock on stack
	ex	af,af'
	pop	hl
	pop	de
	pop	bc
	ret
;
; RS232.EOF
;
A408B:	ld	hl,00000H
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5518		; chars in receivebuffer
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ret	z		; no chars, quit
	call	A4694
	ret

;
; CARTRIDGE INIT
;
A40B2:	xor	a
	ld	(Y6676),a
	dec	a
	ld	(Y66EB),a
	di
	call	A53A8		; slotid on page 2
	push	af
	call	A5389		; my slotid
	ld	(Y6683),a
	ld	h,080H
	call	ENASLT		; put in also in page 2
	xor	a
	ld	b,a		; channel 0
	ld	iy,T431B	; default settings for rs232
A40D0:	push	bc
	call	A42BF		; set channelinfo
	pop	bc
	call	A4342		; reset 8251 (memorymapped)
	jr	nz,A40E8	; no 8251 found, quit
	push	bc
	call	A5232		; initalize rs232 channel
	call	A42F6		; initalize rs232 channelvars
	pop	bc
	inc	b
	ld	a,b
	cp	004H		; 4 channels is max.
	jr	nz,A40D0	; not yet, try next channel
A40E8:	ld	a,b
	ld	(Y668F),a	; # of channels my rs232
	pop	af
	ld	h,080H
	call	ENASLT		; orginal slotid in page 2
	ld	hl,0FB20H
	bit	0,(hl)		; FCALL initialized ?
	jr	nz,A4105	; yes, use it
	set	0,(hl)
	ld	hl,FCALL
	ld	b,005H
A4100:	ld	(hl),0C9H
	inc	hl
	djnz	A4100		; setup do-nothing FCALL
A4105:	xor	a
	ld	de,00001H
	call	FCALL		; get my trap entry
	ld	(Y6692),a
	xor	a
	ld	de,00801H
	call	FCALL		; get rs232 channelnumber for my first channel
	ld	(Y6691),a
	or	a		; any other rs232 ?
	jp	z,A41C1		; no,
	ld	hl,Y6700
	ld	a,(Y6683)
	ld	b,a		; my slotid
	ld	de,00800H
	call	FCALL		; build table
	ld	de,Y6700
	or	a
	sbc	hl,de		; table filled ?
	jp	z,A41C1		; no, act as if there was no other rs232
	ld	a,l
	rrca
	rrca
	and	03FH
	ld	b,a		; /4 = number of rs232 interfaces before my
	ld	h,d
	ld	l,e		; table of rs232 interfaces
A413B:	ld	a,(hl)		; slotid of interface
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)		; jumptable of interface
	inc	de
	ex	de,hl
	push	bc
	push	de
	call	RDSLT		; read rs232 version
	pop	de
	pop	bc
	ex	de,hl
	or	a		; rs232 new style (with RAM) ?
	jr	nz,A4154	; yes, only one 'new style' interface handles it all!
	inc	hl
	inc	hl
	djnz	A413B		; next interface
	jp	A41E3		; all others are old rs232's, continue normally
;
A4154:	ld	a,0FFH
	ld	(Y6682),a	; disable my STATEMENT/DEVICE handler
	dec	hl
	dec	hl
	ld	a,(OLDINT+0)
	or	a		; has a rs232 already hooked INT?
	jr	z,A4187		; no,
	ld	a,(hl)		; slotid of last 'new style' rs232 interface before me
	push	hl
	ld	hl,Y6676
	call	RDSLT
	pop	hl
	or	a		; is there a second 'new style'rs232 interface before me
	jr	nz,A4187	; yes,
	ld	a,(hl)		; slotid of last 'new style' rs232 interface before me
	push	hl
	ld	hl,Y6691
	call	RDSLT		; read first channelnumber of interface
	pop	hl
	or	a		; has this interface channel 0 (first rs232) ?
	jr	nz,A4187	; no,
	ld	a,(Y6683)
	ld	e,a		; my slotid
	ld	a,(hl)
	push	hl
	ld	hl,Y6676
	ld	(hl),e
	call	WRSLT
	pop	hl
A4187:	ld	b,(hl)		; slotid of interface
	ld	hl,Y6600-2	; table
A418B:	inc	hl
	inc	hl
	push	bc
	ld	a,b
	call	RDSLT
	pop	bc
	or	a		; table entry used ?
	jr	nz,A418B	; yes, skip to the next
	ld	a,(Y6676)
	or	a
	jr	z,A41AE
	push	bc
	ld	a,b
	ld	e,0FFH
	call	WRSLT
	pop	bc
	inc	hl
	push	bc
	ld	a,b
	ld	e,0FFH
	call	WRSLT
	pop	bc
	inc	hl		; special entry ?
A41AE:	ld	a,(Y6683)
	ld	e,a		; my slotid
	push	bc
	ld	a,b
	call	WRSLT
	pop	bc
	inc	hl
	ld	a,(Y668F)	; # of channels of my rs232
	ld	e,a
	ld	a,b
	jp	WRSLT
;
A41C1:	call	A4328		; reset 8251 (I/O)
	jr	z,A41E3		; 8251 found on I/O space, leave this one memorymapped
	di
	call	A53A8		; slotid on page 2
	push	af
	ld	a,(Y6683)
	ld	h,080H
	call	ENASLT		; my slotid on page 2
	ld	a,0FFH
	ld	(YBFFA),a	; enable serial on I/O space
	pop	af
	ld	h,080H
	call	ENASLT		; restore page 2
	ld	hl,0FFFEH
	jr	A41E6
;
A41E3:	ld	hl,0EFEEH
A41E6:	ld	(Y6695),hl
	ld	hl,0EFEEH
	ld	(Y6697),hl
	xor	a
	ld	(Y6682),a	; enable my STATEMENT/DEVICE handler
	ld	(Y6687),a
	ld	(Y66A3),a
	ld	(Y669E),a
	ld	hl,06600H
	ld	b,15*2
A4201:	ld	(hl),a
	inc	hl
	djnz	A4201		; clear table
	ld	hl,Y664B
	ld	b,02DH
A420A:	ld	(hl),a
	inc	hl
	djnz	A420A		; clear table
	dec	a
	ld	hl,Y661E
	ld	b,02DH
A4214:	ld	(hl),a
	inc	hl
	djnz	A4214		; table with defaults
	ld	a,(Y6683)	; my slotid
	ld	(Y6600+0),a
	ld	a,(Y668F)	; # of channels my rs232
	ld	(Y6600+1),a
	ld	de,Y6699
	di
	ld	hl,0FFCAH
	ld	bc,00005H
	ldir			; save FCALL for cascading
	ld	a,(Y6683)
	ld	(FCALL+1),a
	ld	a,0F7H
	ld	(FCALL+0),a
	ld	hl,T4727
	ld	(FCALL+2),hl
	ld	a,0C9H
	ld	(FCALL+4),a	; setup FCALL
	ld	bc,00018H
	ld	hl,T4257
	ld	de,0FFCFH
	ldir			; setup DISINT and ENAINT
	xor	a		; channel 0
	call	A42BF		; set channelinfo
	ei
	ret
;
; DISINT
;
T4257:	push	de
	ld	e,002H
	jr	A425F
;
; ENAINT
;
	push	de
	ld	e,003H
A425F:	ld	d,000H
	push	ix
	push	iy
	call	FCALL
	ei
	pop	iy
	pop	ix
	pop	de
	ret
;
A426F:	di
	ld	a,(Y66A3)
	or	a		; HKEY already hooked ?
	ret	nz		; yes, quit
	ld	de,066A3H
	ld	hl,HKEYI
	ld	bc,00005H
	ldir
	ld	a,0F7H
	ld	(HKEYI+0),a
	ld	a,(Y6683)	; my slotid
	ld	(HKEYI+1),a
	ld	hl,T5512
	ld	(HKEYI+2),hl
	ld	a,0C9H
	ld	(HKEYI+4),a
	ret
;
A4297:	di
	ld	a,(Y669E)
	or	a		; HNEWS already hooked ?
	ret	nz		; yes, quit
	ld	de,Y669E
	ld	hl,HNEWS
	ld	bc,5
	ldir
	ld	a,0F7H
	ld	(HNEWS+0),a
	ld	a,(Y6683)	; my slotid
	ld	(HNEWS+1),a
	ld	hl,T50E4
	ld	(HNEWS+2),hl
	ld	a,0C9H
	ld	(HNEWS+4),a
	ret
;
A42BF:	ld	(Y6688),a	; channel
	ld	b,a
	ld	hl,0A000H
	add	a,h
	ld	h,a
	ld	(Y668D),hl	; receiverbuffer
	ld	a,b
	ld	ix,0A400H
	ld	bc,00080H
	ld	hl,0BFF9H	; memorymapped
	ld	de,0FFF8H
	or	a
	jp	z,A42EE
	add	ix,bc
	add	hl,de
	dec	a
	jp	z,A42EE
	add	ix,bc
	add	hl,de
	dec	a
	jp	z,A42EE
	add	ix,bc
	add	hl,de
A42EE:	ld	(Y6689),ix
	ld	(Y668B),hl	; memorymapped adres of channel
	ret
;
A42F6:	ld	(ix+009H),000H
A42FA:	ld	(ix+001H),000H
	ld	(ix+002H),000H
	push	bc
	ld	b,004H
	ld	a,005H
	call	A430C
	pop	bc
	ret
;
A430C:	push	ix
	ex	(sp),hl
	add	a,l
	ld	l,a
	jr	nc,A4314
	inc	hl
A4314:	ld	(hl),000H
	inc	hl
	djnz	A4314
	pop	hl
	ret
;
T431B:	db	"8N1XHNNN"
	dw	1200
	dw	1200
	db	0

A4328:	xor	a
	out	(081H),a
	push	af
	pop	af
	out	(081H),a
	push	af
	pop	af
	out	(081H),a
	push	af
	pop	af
	ld	a,040H
	out	(081H),a
	ex	(sp),hl
	ex	(sp),hl
	in	a,(081H)
	and	03FH
	cp	005H
	ret
;
A4342:	ld	hl,(Y668B)	; memorymapped adres
	xor	a
	ld	(hl),a
	push	af
	pop	af
	ld	(hl),a
A434A:	push	af
	pop	af
	ld	(hl),a
	push	af
	pop	af
	ld	a,040H
	ld	(hl),a
	ex	(sp),hl
	ex	(sp),hl
	ld	a,(hl)
	and	03FH
	cp	005H
	ret
;
; STATEMENT
;
A435A:	ei
	ld	a,(Y6682)	; my handler enabled ?
	or	a
	scf
	ret	nz		; no, quit
	ld	(Y6685),hl
	ld	de,T43AF
	call	A436D		; known statement ?
	ret	c		; no, quit
A436B:	push	de
	ret			; yes, handle
;
A436D:	push	bc
	push	hl
A436F:	ld	hl,0FD89H
	ld	a,(de)
	inc	a
	jr	z,A4388
	call	A438C
	jr	z,A4380
	inc	de
	inc	de
	inc	de
	jr	A436F
;
A4380:	ex	de,hl
	inc	hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	or	a
	jr	A4389
;
A4388:	scf
A4389:	pop	hl
	pop	bc
	ret
;
A438C:	ld	a,(de)
	call	A5229
	ld	c,a
	ld	a,(hl)
	call	A5229
	cp	c
	jr	nz,A439E
	or	a
	ret	z
	inc	de
	inc	hl
	jr	A438C
;
A439E:	ld	a,(de)
	or	a
	jr	z,A43A5
	inc	de
	jr	A439E
;
A43A5:	ld	a,(hl)
	or	a
	jr	z,A43AC
	inc	hl
	jr	A43A5
;
A43AC:	ld	a,l
	or	h
	ret
;
T43AF:	db	"COMINI",0
	dw	A495B
	db	"COMDTR",0
	dw	A4AF4
	db	"COMSTAT",0
	dw	A4B1F
	db	"COMBREAK",0
	dw	A4B43
	db	"COMTERM",0
	dw	A4BA3
	db	"COM",0
	dw	A5001
	db	"COMON",0
	dw	A5068
	db	"COMOFF",0
	dw	A504E
	db	"COMSTOP",0
	dw	A5082
	db	"COMHELP",0
	dw	A4E08
	db	0FFH

;
; DEVICE
;
A440C:	ei
	push	af
	ld	a,(Y6682)		; my handler enabled ?
	or	a
	jr	z,A4417			; yes, handle
	pop	af
	scf
	ret				; no, quit
;
A4417:	pop	af
	cp	0FFH
	jp	nz,A4459
	ld	hl,0FD89H
	ld	a,(hl)
	cp	"C"
	scf
	ret	nz
	inc	hl
	ld	a,(hl)
	cp	"O"
	scf
	ret	nz
	inc	hl
	ld	a,(hl)
	cp	"M"
	scf
	ret	nz
	inc	hl			; yes, it is "COM"
	ld	a,(hl)
	or	a
	jr	nz,A4439
	dec	hl
	ld	a,"0"			; "COM" equals "COM0"
A4439:	sub	030H
	ret	c
	cp	00AH
	ccf
	ret	c
	ld	e,a
	call	A51C7			; RS232.SETCHN
	ret	c
	inc	hl
	ld	a,(hl)
	or	a
	scf
	ret	nz
	ld	a,(Y6687)
	ld	hl,06691H
	sub	(hl)
	ld	hl,066EBH
	cp	(hl)
	adc	a,0FFH
	or	a
	ret
;
A4459:	cp	013H
	jp	nc,A4841
	bit	0,a
	jp	nz,A4841
	push	hl
	push	af
	ld	hl,T4474
	add	a,l
	ld	l,a
	jr	nc,A446D
	inc	h
A446D:	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	pop	af
	ex	(sp),hl
	ret
;
T4474:	dw	A4488
	dw	A450A
	dw	A4847
	dw	A456C
	dw	A457B
	dw	A4611
	dw	A466C
	dw	A4688
	dw	A4865
	dw	A46B4
;
; Device OPEN
;
A4488:	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	pop	hl
	or	a		; already open ?
	ld	a,002H
	jr	nz,A44B2	; yes,
	ld	a,(Y6687)
	ex	de,hl
	push	hl
	add	a,a
	add	a,05AH
	ld	l,a
	ld	h,066H
	ld	(hl),e
	inc	hl
	ld	(hl),d
	pop	hl
	ex	de,hl
	call	A44B9		; RS232.OPEN
	jr	c,A44B2
	ld	(hl),e
	ld	(PTRFIL),hl
	ret
;
A44B2:	dec	a
	jp	z,A483B
	jp	A484D
;
; RS232.OPEN
;
A44B9:	push	bc
	push	hl
	push	de
	call	A53C7		; build ? table
	call	A426F		; initalize interrupt handler
	pop	de
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	or	a
	jr	nz,A4505	; already open,
	ld	a,e
	cp	008H
	jr	nc,A4501
	di
	ld	(hl),e
	call	A42F6		; initalize rs232 channelvars
	call	A54FE		; enable Rx interrupt
	call	A596E		; RTS on
	scf
A44F5:	ccf
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	hl
	pop	bc
	ei
	ret
;
A4501:	xor	a
	inc	a
	jr	A44F5
;
A4505:	ld	a,002H
	or	a
	jr	A44F5
;
; Device CLOSE
;
A450A:	call	A4709
	call	A4525		; RS232.CLOSE
	ld	(hl),000H
	ld	a,(Y6687)
	ex	de,hl
	push	hl
	add	a,a
	add	a,05AH
	ld	l,a
	ld	h,066H
	ld	(hl),000H
	inc	hl
	ld	(hl),000H
	pop	hl
	ex	de,hl
	ret
;
; RS232.CLOSE
;
A4525:	push	de
	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)
	ld	(hl),000H	; channel closed
	cp	002H		; was in output mode ?
	ld	e,000H
	scf
	ccf
	jr	nz,A4541	; no, skip EOF
	ld	a,01AH		; EOF
	call	A56E5		; RS232.SNDCHR
	push	af
	pop	de
A4541:	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5A12		; wait for empty transmitter
	call	A5976		; RTS off
	call	A5505		; Disable Rx interrupt
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	push	de
	pop	af
	pop	hl
	pop	de
	ei
	ret
;
; Device Sequential output
;
A456C:	call	A4709
	ld	a,c
	call	A56E5		; RS232.SNDCHR
	ei
	jp	c,A4871
	jp	z,A4871
	ret
;
; Device Sequential input
;
A457B:	call	A4709
	call	A4585		; RS232.GETCHR
	jp	m,A4871
	ret
;
; RS232.GETCHR
;
A4585:	push	bc
	push	de
	push	hl
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	c,(ix+001H)
	ld	(ix+001H),000H
	ld	a,(ix+002H)
	ld	(ix+002H),000H
	ld	(ix+008H),a
	push	af
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	e,(hl)		; channel mode
	pop	af
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	or	a
	jr	nz,A4605
	ld	a,c
	or	a
	jr	nz,A45D6
	call	A5528
	ei
	ld	c,a
	jp	m,A4605
	call	A58B3
	jr	c,A4605
	jr	z,A4605
A45D6:	ld	a,e
	cp	004H		; Raw mode ?
	jr	z,A4609		; yes,
	ld	a,c
	cp	01AH		; EOF ?
	jr	nz,A4609	; no,
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	a,01AH
	ld	(ix+001H),a
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	or	a
	scf			; flag eof
	jr	A460C
;
A4605:	or	080H
	jr	A460B
;
A4609:	xor	a
	inc	a
A460B:	ld	a,c
A460C:	pop	hl
	pop	de
	pop	bc
	ei
	ret
;
; Device LOC
;
A4611:	call	A4709
	push	hl
	call	A4622		; RS232.LOC
A4618:	ld	(DAC+2),hl
	ld	hl,0F663H
	ld	(hl),002H
	pop	hl
	ret
;
; RS232.LOC
;
A4622:	push	af
	ei
	nop
	nop
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	cp	001H		; input ?
	jr	nz,A465C	; no,
	ld	a,(ix+001H)
	or	a
	jr	z,A4654		; no backup char, thats it
	sub	01AH
	jr	z,A465F		; EOF condition, no chars in buffer
	ld	a,001H		; 1 extra for backup char
A4654:	push	bc
	call	A46E1		; count seq. chars in receivebuffer
	add	a,c
	pop	bc
	jr	A465F
;
A465C:	call	A5518		; chars in receivebuffer
A465F:	ld	l,a
	ld	h,000H
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	af
	ei
	ret
;
; Device LOF
;
A466C:	call	A4709
	push	hl
	call	A4675		; RS232.LOF
A4673:	jr	A4618

;
; RS232.LOF
;
A4675:	push	af
	ei
	call	A4622		; RS232.LOC
	push	de
	ex	de,hl
	ld	a,080H
	ld	l,a
	ld	h,000H
	or	a
	sbc	hl,de
	inc	hl
	pop	de
	pop	af
	ret
;
; Device EOF
;
A4688:	call	A4709
	push	hl
	call	A4694
	jp	m,A4871
	jr	A4673
;
A4694:	push	bc
	ld	b,a
	ei
	call	A4585		; RS232.GETCHR
	jp	m,A46B1
	push	bc
	ld	c,a
	call	A46B7		; RS232.BACKUP
	pop	bc
	cp	01AH
	jr	z,A46AD
	xor	a
	ld	l,a
	ld	h,a
	inc	a
	jr	A46B1
;
A46AD:	ld	hl,0FFFFH
	scf
A46B1:	ld	a,b
	pop	bc
	ret
;
; Device Backup
;
A46B4:	call	A4709
;
; RS232.BACKUP
;
A46B7:	push	af
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	(ix+001H),c
	ld	a,(ix+008H)
	and	038H
	ld	(ix+002H),a
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	af
	ret
;
A46E1:	push	af
	push	hl
	ld	c,000H
	ld	a,(ix+005H)
	or	a
	jr	z,A46F7
	ld	b,a
A46EC:	call	A46FA
	ld	a,(hl)
	cp	01AH
	jr	z,A46F7
	inc	c
	djnz	A46EC
A46F7:	pop	hl
	pop	af
	ret
;
A46FA:	ld	a,(ix+006H)
	add	a,c
	jp	p,A4703
	sub	080H
A4703:	ld	hl,(Y668D)	; receivebuffer
	add	a,a
	ld	l,a
	ret
;
A4709:	push	af
	push	bc
	ex	de,hl
	push	hl
	ld	b,0FFH
	ld	hl,0665AH
A4712:	inc	b
	ld	a,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	cp	e
	jr	nz,A4712
	ld	a,c
	cp	d
	jr	nz,A4712
	ld	a,b
	ld	(Y6687),a
	pop	hl
	ex	de,hl
	pop	bc
	pop	af
	ret

;
; FCALL handler
;
T4727:	ei
	push	af
	ld	a,d
	inc	a		; system exculsive ?
	jp	z,A47EC		; yes,
	dec	a		; broadcast ?
	jp	nz,A47FF	; no,
	ld	a,e
	or	a
	jr	z,A4742		; build device name table
	dec	a
	jr	z,A474F		; return number of trap entries used
	dec	a
	jr	z,A4761		; disable interrupt
	dec	a
	jr	z,A47A7		; enable interrupt
	jp	A4826		; other unknown function, let other FCALL handle it
;
A4742:	ld	a,008H
	call	A4878		; rs232 device
	ld	a,000H
	call	A4878		; reserved byte
	jp	A4826		; and cascade to other FCALL
;
A474F:	push	bc
	push	de
	call	A53C7		; build ? table
	pop	de
	pop	bc
	pop	af
	push	hl
	ld	hl,06690H
	add	a,(hl)
	pop	hl
	push	af
	jp	A4826
;
; FCALL DISINT
;
A4761:	push	bc
	push	de
	push	hl
	ld	a,(Y661E)
	inc	a		; table initalized ?
	jr	z,A47A1		; no, just quit
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	call	A53A8		; slotid on page 2
	push	af
	ld	a,(Y6691)
	ld	d,a		; my channel number
	ld	e,000H
	ld	hl,0664BH
	add	a,l
	ld	l,a
A4781:	ld	a,(hl)		; channel mode
	or	a		; channel open ?
	jr	z,A4791		; no, skip
	ld	a,d
	push	hl
	call	A5448		; enable hardware on page 2
	call	A56B5		; signal transmitter to stop for a while
	call	A5505		; Disable Rx interrupt
	pop	hl
A4791:	inc	hl
	inc	d
	inc	e
	ld	a,(Y6690)	; # of all rs232 channels
	cp	e
	jr	nz,A4781	; next channel
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
A47A1:	pop	hl
	pop	de
	pop	bc
	jp	A4826
;
; FCALL ENAINT
;
A47A7:	push	bc
	push	de
	push	hl
	ld	a,(Y661E)
	inc	a		; table initalized ?
	jr	z,A47A1		; no, just quit
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	call	A53A8		; slotid on page 2
	push	af
	ld	a,(Y6691)
	ld	d,a		; my channel number
	ld	e,000H
	ld	hl,0664BH
	add	a,l
	ld	l,a
A47C7:	ld	a,(hl)		; channel mode
	or	a
	jr	z,A47DA		; not open,
	ld	a,d
	push	hl
	call	A5448		; enable hardware on page 2
	call	A54FE		; enable Rx interrupt
	call	A596E		; RTS on
	call	A569F		; flag transmitter to start transmitting
	pop	hl
A47DA:	inc	hl
	inc	d
	inc	e
	ld	a,(Y6690)	; # of all rs232 channels
	cp	e
	jr	nz,A47C7
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	jr	A47A1
;
A47EC:	ld	a,e
	or	a
	jr	nz,A47FD	; unknown function, let other FCALL handle it
	call	A482A		; jumptable
	ld	a,000H
	call	A4878		; maker = ASCII
	ld	a,000H
	call	A4878		; reserved byte
A47FD:	jr	A4826		; cascade to other FCALL
;
A47FF:	cp	008H		; rs232 ?
	jr	nz,A4826	; no, let other FCALL handle it
	ld	a,e
	or	a
	jr	z,A480D		; build table
	cp	001H
	jr	z,A4817		; return number of channels
	jr	A4826		; unknown function, let other FCALL handle it
;
A480D:	call	A482A		; table
	ld	a,000H
	call	A4878		; reserved byte
	jr	A4826
;
A4817:	push	bc
	push	de
	call	A53C7		; build ? table
	pop	de
	pop	bc
	pop	af
	push	hl
	ld	hl,06690H
	add	a,(hl)		; add my number of channels
	pop	hl
	push	af
A4826:	pop	af
	jp	Y6699		; cascade FCALL
;
A482A:	call	A5389		; my slotid
	call	A4878
	ld	a,010H
	call	A4878
	ld	a,040H
	call	A4878		; jumptable at 04010H
	ret
;
A483B:	ld	ix,06E6BH
	jr	A4875
;
A4841:	ld	ix,06E80H
	jr	A4875
;
; Device Random I/O
;
A4847:	ld	ix,06E86H
	jr	A4875
;
A484D:	ld	ix,06E6EH
	jr	A4875
;
A4853:	ld	ix,06E77H
	jr	A4875
;
A4859:	ld	ix,0481CH
	jr	A4875
;
A485F:	ld	ix,04055H
	jr	A4875
;
A4865:	ld	ix,0475AH
	jr	A4875
;
A486B:	ld	ix,0406DH
	jr	A4875
;
A4871:	ld	ix,073B2H
A4875:	jp	A494A
;
A4878:	push	af
	push	bc
	push	de
	push	ix
	ld	e,a
	ld	a,b
	ld	ix,WRSLT
	call	A494F
	ei
	inc	hl
	pop	ix
	pop	de
	pop	bc
	pop	af
	ret
;
A488E:	push	bc
	push	de
	push	ix
	ld	a,b
	ld	ix,RDSLT
	call	A494F
	ei
	inc	hl
	pop	ix
	pop	de
	pop	bc
	ret
;
A48A1:	push	ix
	ld	ix,000B7H
	call	A494F
	pop	ix
	ret
;
A48AD:	push	bc
	ld	b,a
	ld	a,(Y66AA)
	or	a
	jr	z,A48D3
	ld	a,b
	cp	020H
	jr	nc,A48D3
	ld	a,05EH
	call	A48D5
	ld	a,b
	add	a,040H
	call	A48D5
	ld	a,b
	cp	00AH
	pop	bc
	ret	nz
	ld	a,00DH
	call	A48D5
	ld	a,00AH
	jr	A48D5
;
A48D3:	ld	a,b
	pop	bc
A48D5:	push	af
	call	CHPUT
	ei
	ld	a,(Y66AC)
	or	a
	jr	z,A48E6
	pop	af
	push	af
	call	LPTOUT
	ei
A48E6:	pop	af
	ret
;
A48E8:	ld	a,(hl)
	ex	(sp),hl
	cp	(hl)
	jp	nz,A485F
	inc	hl
	ex	(sp),hl
A48F0:	push	ix
	ld	ix,04666H
	exx
	push	hl
	exx
	call	A494A
	exx
	pop	hl
	exx
	pop	ix
	ret
;
A4902:	push	ix
	ld	ix,04C64H
	call	A494A
	pop	ix
	ret
;
A490E:	push	ix
	ld	ix,0542FH
	call	A494A
	pop	ix
	ret
;
A491A:	push	ix
	ld	ix,T521C
	call	A494A
	pop	ix
	ret
;
A4926:	push	ix
	ld	ix,05EA4H
	call	A494A
	pop	ix
	ret
;
A4932:	push	ix
	ld	ix,067D0H
	call	A494A
	pop	ix
	ret
;
A493E:	push	ix
	ld	ix,A517A
	call	A494A
	pop	ix
	ret
;
A494A:	call	A494F
	ei
	ret
;
A494F:	push	iy
	ld	iy,(EXPTBL+0-1)
	call	CALSLT
	pop	iy
	ret
;
; _COMINI
;
A495B:	ei
	call	A53C7		; build ? table
	call	A5161
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5505		; disable Rx interrupt
	ld	a,(ix+00CH)
	ld	(Y6684),a
	exx
	ld	(Y667A),hl
	exx
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	push	bc
	push	de
	push	hl
	ld	bc,0000DH
	ld	hl,T431B
	ld	de,066AEH
	push	de
	pop	iy
	ldir
	pop	hl
	pop	de
	pop	bc
	exx
	ld	hl,(Y667A)
	exx
	ld	a,b
	and	c
	inc	a
	jr	nz,A49BF
	ld	a,d
	or	a
	jp	z,A4A9C
	cp	03AH
	jp	z,A4A9C
	cp	029H
	jp	z,A4A99
	call	A48E8
	inc	l
	jr	A49E6
;
A49BF:	push	hl
	exx
	push	hl
	exx
	pop	hl
	ld	a,b
	or	a
	jr	z,A49D8
	push	iy
	pop	de
A49CB:	ld	a,(hl)
	cp	020H
	jr	z,A49D4
	call	A5229
	ld	(de),a
A49D4:	inc	de
	inc	hl
	djnz	A49CB
A49D8:	pop	hl
	dec	hl
	call	A48F0
	cp	029H
	jp	z,A4A99
	call	A48E8
	inc	l
A49E6:	cp	02CH
	jr	z,A4A38
	call	A490E
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	(iy+008H),e
	ld	(iy+009H),d
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ld	a,(hl)
	cp	029H
	jr	nz,A4A38
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	(iy+00AH),e
	ld	(iy+00BH),d
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	jr	A4A99
;
A4A38:	call	A48E8
	inc	l
	cp	02CH
	jr	z,A4A6A
	call	A490E
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	(iy+00AH),e
	ld	(iy+00BH),d
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ld	a,(hl)
	cp	029H
	jr	z,A4A99
A4A6A:	call	A48E8
	inc	l
	cp	029H
	jr	z,A4A99
	call	A491A
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	(iy+00CH),e
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	call	A48E8
	add	hl,hl
	dec	hl
A4A99:	call	A48F0
A4A9C:	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5232		; initalize rs232
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	jp	c,A4865
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	pop	hl
	or	a
	call	nz,A54FE	; it is open, Enable Rx interrupt
	ld	a,(Y6684)
	bit	5,a
	call	nz,A596E	; RTS on
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ei
	or	a
	ret
;
; _COMDTR
;
A4AF4:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	call	A48E8
	inc	l
	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	pop	hl
	or	a
	jp	z,A4853		; it is not open,
	call	A490E
	call	A48E8
	add	hl,hl
	ld	a,d
	or	e
	call	A5986		; RS232.DTR
	ei
	ret

;
; _COMSTAT
;
A4B1F:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	call	A48E8
	inc	l
	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	pop	hl
	or	a
	jp	z,A4853		; it is not open,
	call	A4926
	push	hl
	call	A59CA		; RS232.STAT
	ld	(DAC+2),hl
	pop	hl
	call	A51F0
	call	A48E8
	add	hl,hl
	or	a
	ei
	ret

;
; _COMBREAK
;
A4B43:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	push	hl
	ld	hl,0664BH
	ld	a,(Y6687)
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	pop	hl
	or	a
	jp	z,A4853		; it is not open,
	ld	a,d
	cp	02CH
	jr	z,A4B7F
	or	a
	jr	z,A4B7A
	cp	03AH
	jr	z,A4B7A
	call	A48E8
	add	hl,hl
A4B7A:	ld	de,0000AH
	jr	A4B89
;
A4B7F:	call	A48F0
	call	A490E
	call	A48E8
	add	hl,hl
A4B89:	push	hl
	ld	hl,00002H
	or	a
	sbc	hl,de
	jp	nc,A4865
	call	A590C		; RS232.SNDBRK
	pop	hl
	ei
	ld	a,000H
	inc	a
	call	A58B3
	jp	c,A4871
	or	a
	ret

;
; _COMTERM
;
A4BA3:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	ld	a,d
	or	a
	jr	z,A4BB9
	cp	03AH
	jr	z,A4BB9
	call	A48E8
	add	hl,hl
A4BB9:	ld	(Y6685),hl
	xor	a
	ld	(Y66A8),a
	ld	(Y66AC),a
	ld	(Y66AA),a
	ld	(Y66AB),a
	ld	hl,0F8CFH
	ld	de,066BBH
	ld	bc,00030H
	push	bc
	push	hl
	ldir
	pop	hl
	pop	bc
	ld	b,c
	push	hl
A4BDA:	ld	(hl),000H
	inc	hl
	djnz	A4BDA
	pop	de
	ld	hl,T4DC0
	ld	bc,00005H
	push	bc
	ldir
	pop	bc
	ld	de,0F8DFH
	push	bc
	ldir
	pop	bc
	ld	de,0F8EFH
	push	bc
	ldir
	pop	bc
	ld	a,(CSRSR)
	ld	(Y66AD),a
	call	A4DDC
	ld	e,004H		; raw input/output mode
	call	A44B9		; RS232.OPEN
	jp	c,A484D
A4C09:	ei
	call	A4622		; RS232.LOC
	ei
	ld	a,l
	or	h
	jr	z,A4C34
	call	A5528
	ei
	jr	c,A4C60
	ld	c,a
	jp	m,A4C2F
	ld	hl,066A8H
	ld	a,(hl)
	cp	002H
	ld	a,c
	jr	nz,A4C29
	ld	(hl),000H
	jr	A4C90
;
A4C29:	cp	01BH
	jr	nz,A4C2F
	inc	(hl)
	db	1
A4C2F:	ld	(hl),000H
	call	A48AD
A4C34:	call	A4DFD
	call	nz,A4DD4
	call	A48A1		; CTRL-STOP ?
	jr	c,A4C60		; yes,
	call	CHSNS
	ei
	jr	z,A4C09
	call	CHGET
	ei
	cp	0A0H
	jp	z,A4D9F
	call	A4DCF
	ld	c,a
	ld	a,(Y66AB)
	or	a
	jp	z,A4C09
	ld	a,c
	call	A48AD
	jp	A4C09
;
A4C60:	call	A4525		; RS232.CLOSE
	xor	a
T4C64:	ld	(Y66A8),a
	ld	(Y66AC),a
	ld	(Y66AA),a
	ld	(Y66AB),a
	ld	hl,066BBH
	ld	de,0F8CFH
	ld	bc,00030H
	ldir
	ld	hl,(Y6685)
	ld	a,(Y66AD)
	or	a
	push	af
	call	z,A4DEB
	pop	af
	call	nz,A4DDC
	xor	a
	di
	ld	(INTFLG),a
	ret
;
A4C90:	ld	a,(Y66AA)
	or	a
	jp	nz,A4C09
	call	A4DEB
	ld	a,0FFH
	ld	(Y66A9),a
A4C9F:	call	A5528
	ei
	jp	c,A4C60
	cp	03AH
	jr	nz,A4C9F
	call	A4D6D
	jp	c,A4D23
	or	a
	jr	z,A4CFA
	ld	b,a
	ld	e,a
	call	A4D62
	jp	c,A4D23
	call	A4D6D
	jp	c,A4D23
	add	a,l
	add	a,h
	add	a,e
	ld	e,a
A4CC5:	call	A4D6D
	jr	c,A4D23
	ld	(hl),a
	add	a,e
	ld	e,a
	inc	hl
	djnz	A4CC5
	call	A4D6D
	jr	c,A4D23
	add	a,e
	jr	nz,A4D23
	ld	a,047H
	call	A4DCF
	ld	a,(Y66A9)
	or	a
	jr	z,A4CEE
	inc	a
	ld	(Y66A9),a
	ld	a,02AH
	call	A48AD
	jr	A4CF7
;
A4CEE:	dec	a
	ld	(Y66A9),a
	ld	a,07FH
	call	A48AD
A4CF7:	jp	A4C9F
;
A4CFA:	call	A4D62
	jr	c,A4D23
	ld	a,h
	or	l
	jr	nz,A4D2B
	call	A4D6D
	jr	c,A4D23
	cp	001H
	jr	nz,A4D23
	call	A4D6D
	jr	c,A4D23
	cp	0FFH
	jr	nz,A4D23
A4D15:	ld	a,047H
	call	A4DCF
	call	A4DF4
	call	A4DDC
	jp	A4C09
;
A4D23:	ld	a,042H
	call	A4DCF
	jp	A4C9F
;
A4D2B:	call	A4D6D
	jr	c,A4D23
	cp	001H
	jr	nz,A4D23
	add	a,l
	add	a,h
	ld	e,a
	call	A4D6D
	jr	c,A4D23
	add	a,e
	jr	nz,A4D23
	call	A5528
	ei
	jp	c,A4C60
	cp	00AH
	jr	nz,A4D15
	ld	a,047H
	call	A4DCF
	call	A4DF4
	push	ix
	push	hl
	ld	hl,T4D5A
	ex	(sp),hl
	jp	(hl)
;
; >> NO EXECUTION PATH TO HERE <<
T4D5A:	pop	ix
	call	A4DDC
	jp	A4C09
;
A4D62:	call	A4D6D
	ret	c
	ld	h,a
	call	A4D6D
	ret	c
	ld	l,a
	ret
;
A4D6D:	push	bc
	call	A5528
	jr	c,A4D88
	call	A4D8A
	jr	c,A4D88
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	ld	b,a
	call	A5528
	jr	c,A4D88
	call	A4D8A
	jr	c,A4D88
	add	a,b
A4D88:	pop	bc
	ret
;
A4D8A:	call	A5229
	sub	030H
	ret	c
	cp	00AH
	jr	c,A4D9D
	sub	011H
	ret	c
	cp	006H
	ccf
	ret	c
	add	a,00AH
A4D9D:	or	a
	ret
;
A4D9F:	call	CHGET
	ei
	sub	006H
	jr	z,A4DB2
	dec	a
	jr	z,A4DB7
	dec	a
	jr	nz,A4DBD
	ld	hl,066ACH
	jr	A4DBA
;
A4DB2:	ld	hl,066AAH
	jr	A4DBA
;
A4DB7:	ld	hl,066ABH
A4DBA:	ld	a,(hl)
	cpl
	ld	(hl),a
A4DBD:	jp	A4C09
;
T4DC0:	and	b
	ld	b,000H
	ld	l,h
	ld	l,c
	and	b
	rlca
	nop
	ld	l,b
	ld	h,(hl)
	and	b
	ex	af,af'
	nop
	ld	(hl),b
	ld	h,l
A4DCF:	call	A56E5		; RS232.SNDCHR
	ei
	ret
;
A4DD4:	ld	de,00064H
	call	A590C		; RS232.SNDBRK
	ei
	ret
;
A4DDC:	ld	a,01BH
	call	A48AD
	ld	a,079H
A4DE3:	call	A48AD
	ld	a,035H
A4DE8:	jp	A48AD
;
A4DEB:	ld	a,01BH
	call	A48AD
	ld	a,078H
	jr	A4DE3
;
A4DF4:	ld	a,00DH
	call	A48AD
	ld	a,00AH
	jr	A4DE8
;
A4DFD:	ld	a,(INTFLG)
	or	a
	ret	z
	xor	a
	ld	(INTFLG),a
	inc	a
	ret

;
; _COMHELP
;
A4E08:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	ld	a,d
	or	a
	jr	z,A4E1E
	cp	03AH
	jr	z,A4E1E
	call	A48E8
	add	hl,hl
A4E1E:	xor	a
	ld	(Y66AA),a
	ld	(Y66AC),a
	ld	(Y66AB),a
	push	hl
	call	A4DF4
	ld	hl,T4E65
A4E2F:	ld	a,(hl)
	inc	hl
	inc	a
	jr	z,A4E62
	dec	a
	jr	z,A4E44
	call	A48AD
	ld	a,(INTFLG)
	or	a
	jr	z,A4E2F
	cp	003H
	jr	z,A4E62
A4E44:	push	hl
	ld	hl,0FC9BH
	ld	(hl),000H
	call	A4DDC
A4E4D:	ei
	ld	a,(hl)
	or	a
	jr	z,A4E4D
	push	af
	call	A4DEB
	pop	af
	pop	hl
	cp	003H
	jr	z,A4E62
	xor	a
	ld	(INTFLG),a
	jr	A4E2F
;
A4E62:	pop	hl
	or	a
	ret
;
T4E65:	db	"Initialize statement options",13,10
	db	13,10
	db	"CALL COMINI (",34,13,10
	db	"<device# {0,1,2,3}>:",13,10
	db	"<character length {5,6,7,8}>",13,10
	db	"<parity {E,O,I,N}>",13,10
	db	"<stop bits {1,2,3}>",13,10
	db	"<XON/XOFF {X,N}>",13,10
	db	"<CTS hand-shake {H,N}>",13,10
	db	"<auto LF on receive {A,N}>",13,10
	db	"<auto LF on transmit {A,N}>",13,10
	db	"<SI/SO {S,N}>",34,13,10
	db	",<receiver baud rate>",13,10
	db	",<transmitter baud rate>",13,10
	db	",<time out count>",13,10
	db	"                          )",13,10
	db	"Default:",13,10
	db	" CALL COMINI(",34,"0:8N1XHNNN",34,13,10
	db	"      ,1200,1200,0)",13,10
	db	0FFH

;
;
;
A5001:	ei
A5002:	call	A53C7		; build ? table
A5005:	call	A5161
	call	A51E6
	call	A48E8
	inc	l
A500F:	call	A48E8
	adc	a,l
	ld	ix,04769H
	call	A494A
A501A:	push	hl
	ld	a,e
	or	d
	jr	z,A502B
	ld	ix,04295H
A5023:	call	A494A
	jp	nc,A4859
	ld	e,c
	ld	d,b
A502B:	pop	hl
	push	de
	dec	hl
	call	A48F0
	jr	z,A5037
	call	A48E8
	add	hl,hl
A5037:	pop	de
	push	hl
	di
	ld	a,(Y6687)
	call	A5141
	jp	c,A4865
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	call	A4297
	ei
	pop	hl
	or	a
	ret

;
; _COMOFF
;
A504E:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	dec	hl
	call	A48F0
	jr	z,A5062
	call	A48E8
	add	hl,hl
A5062:	ld	ix,0632BH
	jr	A50CF

;
; _COMON
;
A5068:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	dec	hl
	call	A48F0
	jr	z,A507C
	call	A48E8
	add	hl,hl
A507C:	ld	ix,0631BH
	jr	A509A

;
; _COMSTOP
;
A5082:	ei
	call	A53C7		; build ? table
	call	A5161
	call	A51E6
	dec	hl
	call	A48F0
	jr	z,A5096
	call	A48E8
	add	hl,hl
A5096:	ld	ix,06331H
A509A:	push	hl
	di
	ld	a,(Y6687)
	call	A5141
	jp	c,A4865
	ld	a,(hl)
	and	001H
	jr	nz,A50CD
	push	ix
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A42FA
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	ix
A50CD:	ei
	pop	hl
A50CF:	push	hl
	di
	ld	a,(Y6687)
	call	A5141
	jp	c,A4865
	call	A494A
	call	A4297
	ei
	pop	hl
	or	a
	ret
;
T50E4:	ei
	ld	a,(Y661E)
	inc	a		; table initalized ?
	jp	z,Y669E		; no, just quit to old HNEWS
	push	bc
	push	de
	push	hl
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	call	A53A8		; slotid on page 2
	push	af
	ld	a,(Y6691)
	ld	d,a		; my channelnumber
	ld	e,000H
A5101:	ld	a,d
	ld	hl,0664BH
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	or	a
	jr	z,A5116		; it is not open,
	ld	a,d
	call	A5448		; enable hardware on page 2
	call	A5518		; chars in receivebuffer
	ld	a,d
	call	nz,A512B	; not empty, flag event
A5116:	inc	d
	inc	e
	ld	a,(Y6690)	; # of all rs232 channels
	cp	e
	jr	nz,A5101
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	hl
	pop	de
	pop	bc
	jp	Y669E		; cascade to old HNEWS
;
A512B:	call	A5141		; get trappointer
	ret	c		; no trapentry, quit
	ld	a,(hl)
	and	001H		; event on ?
	ret	z		; no, quit
	ld	a,(hl)
	or	004H
	cp	(hl)		; event already flaged ?
	ret	z		; yes, quit
	cp	005H		; event stopped ?
	ret	nz		; yes, quit
	ld	(hl),a
	ld	hl,ONGSBF	; flag for event
	inc	(hl)
	ret
;
A5141:	call	A5153		; get trapentry
	ret	c		; no trap entry, quit
	push	bc
	ld	c,a
	add	a,a
	add	a,c
	ld	c,a
	ld	b,000H
	ld	hl,TRPTBL+18*3
	add	hl,bc
	pop	bc
	or	a
	ret
;
A5153:	push	hl
	ld	hl,06691H
	sub	(hl)		; my channelnumber
	ld	hl,06692H
	add	a,(hl)		; my trap entry
	cp	006H
	ccf			; check if trap available (only 6!)
	pop	hl
	ret
;
A5161:	dec	hl
	call	A48F0
	ld	d,a
	jr	nz,A516F
A5168:	xor	a
	ld	bc,0FFFFH
	push	hl
	jr	A51AD
;
A516F:	cp	028H
	jp	z,A517A
	cp	02CH
	jr	z,A5168
	jr	A5182
;
A517A:	call	A48F0
	ld	d,a
	cp	02CH
	jr	z,A5168
A5182:	call	A4902
	push	hl
	call	A4932
	ld	c,000H
	ld	b,(hl)
	inc	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	a,b
	or	a
	jr	z,A51AD
	inc	hl
	ld	a,(hl)
	cp	03AH
	jr	z,A519F
	dec	hl
	xor	a
	jr	A51AD
;
A519F:	dec	hl
	ld	a,(hl)
	sub	030H
	jr	c,A51C4
	cp	00AH
	jr	nc,A51C4
	inc	hl
	inc	hl
	dec	b
	dec	b
A51AD:	ld	e,a
	push	hl
	exx
	pop	hl
	exx
	pop	hl
	dec	hl
	call	A48F0
	ld	d,a
	push	bc
	call	A51C7		; RS232.SETCHN
	pop	bc
	ret	nc
A51BE:	pop	hl
	ld	hl,(Y6685)
	scf
	ret
;
A51C4:	pop	hl
	jr	A51BE

;
; RS232.SETCHN
;
A51C7:	push	de
	call	A53C7		; build ? table
	pop	de
	ld	a,(Y66EB)
	cp	e
	scf
	ret	z
	ld	a,(Y6690)
	ld	c,a		; # of all rs232 channels
	ld	a,(Y6691)
	ld	b,a		; my channelnumber
	add	a,c
	ld	c,a
	ld	a,e
	cp	b		; is it handled by me ?
	ret	c		; no, before me, quit
	cp	c
	ccf
	ret	c		; no, after me, quit
	ld	(Y6687),a
	ret
;
A51E6:	ld	a,b
	or	c
	ret	z
	ld	a,b
	and	c
	inc	a
	ret	z
	jp	A4865
;
A51F0:	push	hl
	ld	hl,0F663H
	ld	a,(hl)
	cp	002H
	jr	z,A521E
	cp	004H
	jr	z,A520E
	cp	008H
	jp	nz,A486B
	ld	(hl),002H
	push	de
	ld	a,008H
	call	A493E
	ld	c,008H
	jr	A5218
;
A520E:	ld	(hl),002H
	push	de
	ld	a,004H
	call	A493E
	ld	c,004H
A5218:	pop	de
	ld	hl,DAC+0
T521C:	jr	A5223
;
A521E:	ld	hl,DAC+2
	ld	c,002H
A5223:	ld	b,000H
	ldir
	pop	hl
	ret
;
A5229:	cp	061H
	ret	c
	cp	07BH
	ret	nc
	sub	020H
	ret
;
A5232:	ld	a,(iy+000H)
	sub	"5"
	cp	004H		; bitsize 5-8 ?
	jr	nc,A5253	; no, error
	ld	b,a
	ld	d,a
	call	A530A
	ld	a,(iy+001H)
	cp	"E"
	jr	z,A5255
	cp	"O"
	jr	z,A5257
	cp	"I"
	jr	z,A525B
	cp	"N"
	jr	z,A5262
A5253:	scf
	ret
;
A5255:	set	3,b
A5257:	set	2,b
	jr	A5262
;
A525B:	ld	a,b
	cp	003H		; 8 bitsize + ignore ?
	jp	z,A5253		; yes, not possible, error
	inc	b		; extra bit to ignore parity
A5262:	rlc	b
	rlc	b
	ld	a,(iy+002H)
	sub	"1"
	cp	003H		; stopbits 1-3 ?
	jp	nc,A5253	; no, error
	inc	a
	rrca
	rrca
	or	b
	ld	b,a
	ld	c,000H
	ld	a,(iy+003H)
	cp	"X"		; xon/xoff handshake ?
	jr	nz,A5282	; no,
	set	0,c
	jr	A5287
;
A5282:	cp	"N"		; no xon/xoff handshake ?
	jp	nz,A5253	; not either, error
A5287:	ld	a,(iy+004H)
	cp	"H"		; CTR/RTS handshake ?
	jr	nz,A5292	; no,
	set	1,c
	jr	A5297
;
A5292:	cp	"N"		; no CTR/RTS handshake ?
	jp	nz,A5253	; not either, error
A5297:	ld	a,(iy+005H)
	cp	"A"
	jr	nz,A52A2
	set	3,c		; auto LF receiver
	jr	A52A7
;
A52A2:	cp	"N"
	jp	nz,A5253
A52A7:	ld	a,(iy+006H)
	cp	"A"
	jr	nz,A52B2
	set	2,c		; auto LF sender
	jr	A52B7
;
A52B2:	cp	"N"
	jp	nz,A5253
A52B7:	ld	a,(iy+007H)
	cp	"S"
	jr	nz,A52C8
	ld	a,d
	cp	002H
	jp	nz,A5253
	set	4,c		; SI/SO control
	jr	A52CD
;
A52C8:	cp	"N"
	jp	nz,A5253
A52CD:	ld	a,c
	ld	(ix+00AH),a
	ld	a,002H		; 16x mode
	or	b
	ld	(ix+00DH),a	; mode byte
	push	hl
	ld	hl,(Y668B)	; memorymapped adres
	call	A58E6		; initialize 8251
	ld	e,(iy+008H)
	ld	d,(iy+009H)
	call	A531E		; get countervalue
	jr	c,A5308
	ld	c,000H
	call	A5A3F		; initialize counter 0
	ld	e,(iy+00AH)
	ld	d,(iy+00BH)
	call	A531E		; get countervalue
	jr	c,A5308
	ld	c,001H
	call	A5A3F		; initialize counter 1
	ld	a,(iy+00CH)
	ld	(ix+004H),a	; timeout counter
	call	A59B2		; DTR on
	or	a
A5308:	pop	hl
	ret
;
A530A:	push	af
	push	bc
	xor	003H
	ld	c,0FFH
	jr	z,A5317
	ld	b,a
A5313:	srl	c
	djnz	A5313
A5317:	ld	a,c
	ld	(ix+00BH),a
	pop	bc
	pop	af
	ret
;
A531E:	push	hl
	bit	7,d
	jr	z,A5330
	ld	a,e
	and	d
	inc	a
	jr	z,A534C
	ld	hl,00000H
	sbc	hl,de
	ex	de,hl
	jr	A534B
;
A5330:	ld	hl,T534F
A5333:	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	a,b
	or	c
	jr	z,A534C
	push	hl
	ld	l,e
	ld	h,d
	or	a
	sbc	hl,bc
	pop	hl
	jr	z,A5348
	inc	hl
	inc	hl
	jr	A5333
;
A5348:	ld	e,(hl)
	inc	hl
	ld	d,(hl)
A534B:	scf
A534C:	ccf
	pop	hl
	ret
;
T534F:	dw	50,2304
	dw	75,1536
	dw	110,1047
	dw	300,384
	dw	600,192
	dw	1200,96
	dw	1800,64
	dw	2000,58
	dw	2400,48
	dw	3600,32
	dw	4800,24
	dw	7200,16
	dw	9600,12
	dw	19200,6
	dw	0

A5389:	push	bc
	push	hl
	in	a,(0A8H)
	rrca
	rrca
	and	003H
	ld	c,a
	ld	b,000H
	ld	hl,0FCC1H
	add	hl,bc
	ld	a,(hl)
A5399:	and	080H
	or	c
	ld	c,a
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)
	and	00CH
	or	c
	pop	hl
	pop	bc
	ret
;
A53A8:	in	a,(0A8H)
	rrca
	rrca
	rrca
	rrca
	and	003H
	ld	c,a
	ld	b,000H
	ld	hl,0FCC1H
	add	hl,bc
	ld	a,(hl)
	and	080H
	or	c
	ld	c,a
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)
	rrca
	rrca
	and	00CH
	or	c
	ret
;
A53C7:	push	hl
	ld	a,(Y661E)
	inc	a		; table initalized ?
	jr	z,A53E0		; no, build it
	ld	hl,Y6600-2
A53D1:	inc	hl
	inc	hl
	ld	a,(hl)
	or	a		; end of table ?
	jr	nz,A53D1	; no, next entry
	ld	de,(Y6680)
	sbc	hl,de
	pop	hl		; table still of same length ?
	ret	z		; yes, quit
	push	hl
A53E0:	ld	(Y6690),a	; zero
	ld	hl,Y6600	; table
	ld	de,Y661E
A53E9:	ld	a,(hl)
	or	a		; end of table ?
	jr	z,A5434		; yes, finish it
	cp	0FFH		; special marker ?
	jr	nz,A5405	; just normal, handle it
	ld	(de),a
	inc	de
	ld	(de),a
	inc	de
	ld	(de),a
	inc	de
	inc	hl
	inc	hl
	ld	a,(Y6690)
	ld	(Y66EB),a
	inc	a
	ld	(Y6690),a	; +1
	jr	A53E9		; next entry
;
A5405:	and	003H
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	ld	b,a		; OR mask primary slot for page 2
	ld	a,(hl)
	and	08CH		; is the slot expanded ?
	jp	p,A5415		; no,
	add	a,a
	add	a,a		; OR mask secondary slot for page 2
	db	0DAH		; jp c, which is never true, skip next instruction
A5415:	ld	a,0FFH
	ld	c,a		; OR mask secondary slot for page 2
	inc	hl
	ld	a,(hl)		; number of channels
	ex	de,hl
A541B:	ld	(hl),b
	inc	hl
	ld	(hl),c
	inc	hl
	ex	de,hl
	push	af
	sub	(hl)
	ld	(de),a
	inc	de
	ld	a,(Y6690)
	inc	a
	ld	(Y6690),a	; +1
	pop	af
	ex	de,hl
	dec	a
	jr	nz,A541B	; next channel
	ex	de,hl
	inc	hl
	jr	A53E9		; next entry
;
A5434:	dec	a
	ld	(de),a		; end marker
	ld	(Y6680),hl	; save end of table
	ld	hl,06690H
	ld	a,(hl)
	cp	005H
	jr	c,A5443
	ld	(hl),004H	; only 4 channels max supported
A5443:	pop	hl
	ret
;
A5445:	ld	a,(Y6687)
A5448:	di
	push	de
	ld	hl,06691H
	sub	(hl)		; my channelnumber
	ld	hl,(Y6695)
	jr	z,A5456
	ld	hl,(Y6697)
A5456:	ld	(Y6693),hl
	ld	hl,Y661E
	ld	c,a
	add	a,a
	add	a,c		; *3
	add	a,l
	ld	l,a
	ld	b,(hl)		; primary
	inc	hl
	ld	c,(hl)		; secundairy
	inc	hl
	ld	l,(hl)		; channel
	in	a,(0A8H)
	and	0CFH
	or	b
	out	(0A8H),a
	bit	7,c
	jp	nz,A5497
	ld	d,a
	and	03FH
	ld	e,a
	ld	a,b
	rlca
	rlca
	or	e
	out	(0A8H),a
	ld	a,(YFFFF)
	cpl
	and	0CFH
	or	c
	ld	(YFFFF),a
	ld	e,a
	ld	a,d
	out	(0A8H),a
	ld	a,b
	rlca
	rlca
	rlca
	rlca
	ld	d,l
	add	a,0C5H
	ld	l,a
	ld	h,0FCH
	ld	(hl),e
	ld	l,d
A5497:	ld	a,l
	call	A42BF		; set channelinfo
	pop	de
	ret
;
A549D:	di
	exx
	pop	hl
	pop	bc
	push	hl
	push	af
	ld	a,b
	and	083H
	jp	m,A54B8
	add	a,a
	add	a,a
	add	a,a
	add	a,a
	ld	b,a
	in	a,(0A8H)
	and	0CFH
	or	b
	out	(0A8H),a
	pop	af
	exx
	ret
;
A54B8:	ld	a,b
	and	003H
	add	a,0C5H
	ld	l,a
	ld	h,0FCH
	ld	a,b
	add	a,a
	add	a,a
	ld	e,a
	and	00CH
	add	a,a
	add	a,a
	ld	b,a
	ld	a,e
	and	030H
	ld	c,a
	ld	a,(hl)
	and	030H
	cp	c
	jr	nz,A54DD
	in	a,(0A8H)
	and	0CFH
	or	b
	out	(0A8H),a
	pop	af
	exx
	ret
;
A54DD:	in	a,(0A8H)
	and	0CFH
	or	b
	ld	d,a
	and	03FH
	ld	e,a
	ld	a,b
	rlca
	rlca
	or	e
	out	(0A8H),a
	ld	a,(YFFFF)
	cpl
	and	0CFH
	or	c
	ld	(YFFFF),a
	ld	e,a
	ld	a,d
	out	(0A8H),a
	ld	(hl),e
	pop	af
	exx
	ret
;
A54FE:	push	af
	push	hl
	ld	a,(Y6693)
	jr	A550A
;
A5505:	push	af
	push	hl
	ld	a,(Y6694)
A550A:	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	ld	(hl),a		; write interruptmask register
	pop	hl
	pop	af
	ret

;
; Interrupt routine RS232
;
T5512:	call	A559B
	jp	Y66A3		; cascade to old interrupt handler
;
A5518:	ld	a,(ix+005H)
	push	bc
	ld	b,a
	ld	a,(ix+001H)
	or	a		; backup char ?
	jr	z,A5525
	ld	a,001H		; yes, add 1 extra
A5525:	add	a,b
	pop	bc
	ret
;
A5528:	push	hl
	push	de
	push	bc
A552B:	ei
	nop
	nop
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A48A1		; CTRL-STOP ?
	jr	c,A5593		; yes,
	ld	hl,(Y668B)	; memory mapped adres
	ld	a,(ix+005H)
	or	a
	jr	nz,A5564
	call	A596E		; RTS on
	call	A569F		; flag transmitter to start transmitting
	jr	c,A5593
	jr	z,A5593
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	jr	A552B
;
A5564:	cp	003H
	jr	nc,A5572
	call	A596E		; RTS on
	call	A569F		; flag transmitter to start transmitting
	jr	c,A5593
	jr	z,A5593
A5572:	dec	(ix+005H)
	call	A567D		; get spot in receive buffer
	ld	c,(hl)		; char
	ld	b,080H
	inc	hl
	ld	a,(hl)		; status
	ld	(ix+008H),a
	or	a		; error receiving it ?
	jr	z,A5584
	inc	b		; yes, flag it
A5584:	ld	a,c
	or	a
	dec	b
A5587:	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ei
	pop	bc
	pop	de
	pop	hl
	ret
;
A5593:	push	af
	pop	bc
	res	7,c
	push	bc
	pop	af
	jr	A5587
;
A559B:	ld	a,(Y661E)
	inc	a		; table initalized ?
	ret	z		; no, quit
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	call	A53A8		; slotid on page 2
	push	af
	ld	a,(Y6691)
	ld	d,a		; my channelnumber
	ld	e,000H
A55B2:	ld	a,d
	ld	hl,0664BH
	add	a,l
	ld	l,a
	ld	a,(hl)		; channel mode
	or	a
	jr	z,A55C5		; it is not open,
	ld	a,d
	call	A5448		; enable hardware on page 2
	ld	a,(hl)
	and	002H		; RxRDY ?
	jr	nz,A55D5	; yes, receive
A55C5:	inc	d
	inc	e
	ld	a,(Y6690)
	cp	e
	jr	nz,A55B2
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ret
;
A55D5:	call	A55E0
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ret
;
A55E0:	dec	hl
	ld	a,(hl)		; receive char
	inc	hl
	and	(ix+00BH)	; mask off unused bits
	ld	c,a
	ld	a,(hl)
	and	038H		; any errors ?
	jp	z,A55F5		; no,
	push	af
	ld	a,(ix+00CH)
	or	010H		; ER (reset errors)
	ld	(hl),a
	pop	af
A55F5:	ld	b,a
	or	a		; any errors ?
	jr	nz,A5613	; yes,
	ld	a,c
	cp	011H		; XON char ?
	jr	z,A5608		; yes,
	cp	013H		; XOFF char ?
	jr	nz,A5623
	set	2,(ix+009H)	; set XOFF flag
	jr	A560C
;
A5608:	res	2,(ix+009H)	; reset XOFF flag
A560C:	bit	0,(ix+00AH)	; XON/XOFF handshake ?
	ret	nz		; yes, quit
	jr	A5623
;
A5613:	and	020H		; framing error ?
	jr	z,A563B		; no,
	ld	a,c
	or	a		; 
	jr	nz,A563B
	set	4,(ix+009H)
	ld	b,000H
	jr	A563B
;
A5623:	bit	4,(ix+00AH)	; SI/SO control ?
	jr	z,A563B		; no,
	ld	a,c
	sub	00FH		; SI ?
	jr	nz,A5633
	res	7,(ix+009H)	; yes, reset flag
	ret
;
A5633:	inc	a		; SO ?
	jr	nz,A563B
	set	7,(ix+009H)	; yes, set flag
	ret
;
A563B:	ld	a,(ix+005H)
	and	a
	ret	m
	inc	(ix+005H)
	call	A568E		; put spot in receive buffer
	bit	4,(ix+00AH)	; SI/SO control ?
	ld	a,c
	jr	z,A5659		; no,
	cp	020H
	jr	c,A5659		; control char, do not modify
	bit	7,(ix+009H)
	jr	z,A5659
	or	080H		; SO, set bit 7 = 1
A5659:	ld	(hl),a
	ld	a,(ix+005H)
	and	a
	jp	p,A5663
	set	7,b
A5663:	cp	060H		; buffer filled with more than 96 chars ?
	call	nc,A56B5	; yes, signal transmitter to stop for a while
	ld	a,b
	inc	hl
	ld	(hl),a		; status
	or	a		; errors ?
	ret	nz		; yes, quit
	ld	a,(ix+00AH)
	bit	3,a		; auto LF receiver ?
	ret	z		; no, quit
	dec	hl
	ld	a,(hl)
	cp	00DH		; CR ?
	ret	nz		; no, quit
	ld	bc,0000AH
	jr	A563B		; 'receive' LF
;
A567D:	ld	hl,(Y668D)	; receivebuffer
	ld	a,(ix+006H)
	add	a,a
	ld	l,a
	inc	(ix+006H)
	ret	p
	ld	(ix+006H),000H
	ret
;
A568E:	ld	hl,(Y668D)	; receivebuffer
	ld	a,(ix+007H)
	add	a,a
	ld	l,a
	inc	(ix+007H)
	ret	p
	ld	(ix+007H),000H
	ret
;
A569F:	ld	a,(ix+009H)
	bit	1,a		; XOFF status ?
	jr	nz,A56A9	; yes, send XON
	xor	a
	inc	a
	ret
;
A56A9:	ld	c,011H		; XON
	call	A56CD
	ret	c
	ret	z
	res	1,(ix+009H)
	ret
;
A56B5:	xor	a
	inc	a
	ld	a,(ix+009H)
	bit	1,a		; already XOFF ?
	ret	nz		; yes, quit
	set	1,(ix+009H)
	ld	c,013H		; XOFF
	call	A56CD		; handle handshake
	call	A5A12		; wait for empty transmitter
	call	A5976		; RTS off
	ret
;
A56CD:	ld	a,(ix+00AH)
	bit	0,a		; XON/XOFF handshake ?
	jr	nz,A56D7	; yes, send handshake char
	xor	a
	inc	a
	ret
;
A56D7:	call	A5A12		; wait for empty transmitter
	ld	a,c
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	dec	hl
	ld	(hl),a		; send char
	pop	hl
	xor	a
	inc	a
	ret
;
; RS232.SNDCHR
;
A56E5:	push	bc
	ld	c,a
	call	A56ED
	ld	a,c
	pop	bc
	ret
;
A56ED:	push	bc
	ld	c,a
	ei
	nop
	nop
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	bit	4,(ix+00AH)	; SI/SO control ?
	jr	z,A574E		; no,
	ld	a,c
	cp	020H
	jr	c,A574E		; control char, unmodified
	bit	0,(ix+009H)
	jr	nz,A5733
	or	a
	jp	p,A574E
	ld	(Y667C),bc
	ld	c,00EH
	call	A577A
	ld	bc,(Y667C)
	jr	c,A576C
	jr	z,A576C
	set	0,(ix+009H)
	jr	A574C
;
A5733:	or	a
	jp	m,A574C
	ld	(Y667C),bc
	ld	c,00FH
	call	A577A
	ld	bc,(Y667C)
	jr	c,A576C
	jr	z,A576C
	res	0,(ix+009H)
A574C:	res	7,c
A574E:	ld	a,c
	jr	A5769
;
; >> NO EXECUTION PATH TO HERE <<
	ei
	push	bc
	ld	c,a
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
A5769:	call	A577A
A576C:	call	A58D5
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ld	a,c
	pop	bc
	ei
	ret
;
A577A:	bit	2,(ix+00AH)	; auto LF sender ?
	jr	z,A5790		; no,
	cp	00AH		; LF ?
	jr	nz,A5790	; no,
	bit	5,(ix+009H)
	jr	z,A5790
	res	5,(ix+009H)
	or	a
	ret
;
A5790:	bit	0,(ix+00AH)	; XON/XOFF handshake ?
	jr	z,A580E		; no,
	bit	2,(ix+009H)
	jr	z,A580E
	ld	(Y667A),hl
	pop	hl
	ld	(Y667E),hl
	ld	a,(ix+004H)
	ld	h,a
A57A7:	ld	l,100
A57A9:	call	A5A32		; initalize counter 2
A57AC:	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ei
	call	A48A1		; CTRL-STOP ?
	di
	jr	nc,A57D8	; no,
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	scf
A57D0:	ld	hl,(Y667E)
	push	hl
	ld	hl,(Y667A)
	ret
;
A57D8:	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	bit	2,(ix+009H)
	jr	z,A5807
	ld	a,(ix+004H)
	or	a
	jr	z,A57AC
	call	A5A28		; counter 2 finished ?
	jr	nc,A57AC	; no,
	or	a
	dec	l		; al done ?
	jr	nz,A57A9	; no, next loop
	dec	h
	jr	nz,A57A7
	jr	A57D0
;
A5807:	ld	hl,(Y667E)
	push	hl
	ld	hl,(Y667A)
A580E:	call	A5A12		; wait for empty transmitter
	bit	1,(ix+00AH)	; CTS/RTS handshaking ?
	jp	z,A589A		; no, continue
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	ld	a,(hl)
	pop	hl
	bit	7,a		; CTS ?
	jr	z,A589A		; yes, continue
	ld	(Y667A),hl
	pop	hl
	ld	(Y667E),hl
	ld	a,(ix+004H)
	ld	h,a
A582E:	ld	l,100
A5830:	call	A5A32		; initalize counter 2
A5833:	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ei
	call	A48A1		; CTRL-STOP ?
	di
	jr	nc,A585F	; no,
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	scf
A5857:	ld	hl,(Y667E)
	push	hl
	ld	hl,(Y667A)
	ret
;
A585F:	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	ld	a,(hl)
	pop	hl
	bit	7,a		; CTS ?
	jr	z,A5893
	ld	a,(ix+004H)
	or	a
	jr	z,A5833
	call	A5A28		; counter 2 finished ?
	jr	nc,A5833	; no,
	or	a
	dec	l
	jr	nz,A5830
	dec	h
	jr	nz,A582E
	jr	A5857
;
A5893:	ld	hl,(Y667E)
	push	hl
	ld	hl,(Y667A)
A589A:	ld	a,c
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	dec	hl
	ld	(hl),a		; send char
	pop	hl
	cp	00DH		; CR ?
	jr	nz,A58AC
	set	5,(ix+009H)
	jr	A58B0
;
A58AC:	res	5,(ix+009H)
A58B0:	xor	a
	inc	a
	ret
;
A58B3:	ex	af,af'
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ex	af,af'
	call	A58D5
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	ret
;
A58D5:	ld	(ix+008H),000H
	jr	c,A58E1
	ret	nz
	set	6,(ix+008H)
	ret
;
A58E1:	set	2,(ix+008H)
	ret
;
A58E6:	xor	a
	ld	(hl),a
	push	af
	pop	af
	ld	(hl),a
	push	af
	pop	af
	ld	(hl),a
	push	af
	pop	af
	ld	a,040H
	ld	(hl),a
	push	af
	pop	af
	ld	a,(ix+00DH)
	ld	(hl),a		; write mode
	push	af
	pop	af
	dec	hl
	ld	a,(hl)
	inc	hl
	call	A5961		; read status
	ld	a,007H
	call	A5A21		; DTR on, Receive and Transmit enable
	dec	hl
	ld	a,(hl)
	inc	hl
	jp	A5961		; read status

;
; RS232.SNDBRK
;
A590C:	push	bc
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	call	A5505		; disable Rx interrupt
	ld	a,(ix+00CH)
	or	008H		; SBRK
	ld	b,a
A592B:	call	A48A1		; CTRL-STOP ?
	jr	c,A5945		; yes,
	call	A5A12		; wait for empty transmitter
	xor	a
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	dec	hl
	ld	(hl),a		; send character (break)
	inc	hl
	ld	a,b
	call	A5A21		; write 8251 command
	pop	hl
	dec	de
	ld	a,e
	or	d
	jr	nz,A592B
A5945:	push	af
	call	A5A12		; wait for empty transmitter
	ld	a,b
	and	0F7H		; SBRK off
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	call	A5A21		; write 8251 command
	pop	hl
	call	A54FE		; Enable Rx interrupt
	pop	af
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	bc
	ret
;
A5961:	ld	a,(hl)
	and	038H
	ret	z
	push	af
	ld	a,(ix+00CH)
	or	010H		; ER (reset errors)
	ld	(hl),a
	pop	af
	ret
;
A596E:	push	af
	ld	a,(ix+00CH)
	set	5,a		; RTS on
	jr	A597C
;
A5976:	push	af
	ld	a,(ix+00CH)
	res	5,a		; RTS off
A597C:	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	call	A5A21		; write 8251 command
	pop	hl
	pop	af
	ret

;
; RS232.DTR
;
A5986:	push	af
	ld	(Y667C),a
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	a,(Y667C)
	call	A59AF
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	af
	ei
	ret
;
A59AF:	or	a		; DTR off ?
	jr	z,A59BA		; yes, put it off
A59B2:	push	af
	ld	a,(ix+00CH)
	or	002H		; set DTR
	jr	A59C0
;
A59BA:	push	af
	ld	a,(ix+00CH)
	and	0FDH		; reset DTR
A59C0:	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	call	A5A21		; write 8251 command
	pop	hl
	pop	af
	ret
;
; RS232.STAT
;
A59CA:	push	af
	push	de
	di
	ld	(Y6678),sp
	ld	sp,067FCH
	push	bc
	push	hl
	call	A53A8		; slotid on page 2
	push	af
	call	A5445		; enable hardware on page 2
	pop	af
	pop	hl
	pop	bc
	push	af
	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	ld	a,(hl)		; read rs232 system status
	ld	e,0C1H
	xor	e		; invert bits
	and	e		; mask off unused
	ld	e,a
	dec	hl
	ld	a,(hl)
	and	080H		; DSR status
	jr	z,A59F3
	set	3,e		; set DSR flag
A59F3:	di
	ld	a,(ix+009H)
	bit	4,a
	jr	z,A5A02
	set	2,e
	res	4,a
	ld	(ix+009H),a
A5A02:	ld	a,(ix+008H)
	ld	h,a
	ld	l,e
	call	A549D		; restore slotid page 2
	ld	sp,(Y6678)
	pop	de
	pop	af
	ei
	ret
;
A5A12:	push	af
	push	hl
	ld	hl,(Y668B)	; memory mapped adres
A5A17:	ld	a,(hl)
	and	005H
	cp	005H
	jr	nz,A5A17	; wait until transmitter is empty
	pop	hl
	pop	af
	ret
;
A5A21:	ld	(hl),a
	ld	(ix+00CH),a
	push	af
	pop	af
	ret
;
A5A28:	push	hl
	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	ld	a,(hl)
	pop	hl
	rlca
	rlca
	ret
;
A5A32:	push	af
	push	bc
	push	de
	push	hl
	ld	b,030H		; LSB/MSB, mode 0 (down counter), binary
	ld	c,002H		; counter 2
	ld	de,04800H
	jr	A5A45
;
A5A3F:	push	af
	push	bc
	push	de
	push	hl
	ld	b,036H		; LSB/MSB, mode 3 (square wave), binary
A5A45:	ld	hl,(Y668B)	; memory mapped adres
	inc	hl
	inc	hl
	inc	hl
	push	hl
	inc	hl
	inc	hl
	inc	hl
	ex	(sp),hl
	push	bc
	ld	b,000H
	add	hl,bc
	pop	bc
	ex	(sp),hl
	ld	a,c
	rrca
	rrca
	or	b
	ld	(hl),a
	pop	hl
	ld	(hl),e
	ld	(hl),d
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret

	end
